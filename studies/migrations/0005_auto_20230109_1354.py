# Generated by Django 4.1.4 on 2023-01-09 13:54

from django.db import migrations

from configuration.initial_setup import paradigms, task_types, techniques, modalities, consciousness_measure_types, \
    consciousness_measure_phases


def bootstrap_type_models(apps, schema_editor):
    ConsciousnessMeasureType = apps.get_model("studies", "ConsciousnessMeasureType")
    for measure_type in consciousness_measure_types:
        ConsciousnessMeasureType.objects.get_or_create(name=measure_type)

    ConsciousnessMeasurePhaseType = apps.get_model("studies", "ConsciousnessMeasurePhaseType")
    for measure_phase in consciousness_measure_phases:
        ConsciousnessMeasurePhaseType.objects.get_or_create(name=measure_phase)

    Theory = apps.get_model("studies", "Theory")
    for theory in ["Global Workspace",
                   "Integrated Information",
                   "Higher Order Thought",
                   "First Order & Predictive Processing",
                   "Other"]:
        Theory.objects.get_or_create(name=theory)

    global_workspace_theory = Theory.objects.get(name='Global Workspace')
    integrated_information = Theory.objects.get(name='Integrated Information')
    higher_order_thought = Theory.objects.get(name='Higher Order Thought')
    first_order_and_predictive_processing = Theory.objects.get(name='First Order & Predictive Processing')

    Theory.objects.get_or_create(name='GNW', parent=global_workspace_theory)
    Theory.objects.get_or_create(name='IIT', parent=integrated_information)
    Theory.objects.get_or_create(name='HOT', parent=higher_order_thought)
    Theory.objects.get_or_create(name='RPT', parent=first_order_and_predictive_processing)

    ModalityType = apps.get_model("studies", "ModalityType")
    for modality in modalities:
        ModalityType.objects.get_or_create(name=modality)

    Technique = apps.get_model("studies", "Technique")
    for technique in techniques:
        Technique.objects.get_or_create(name=technique)

    TaskType = apps.get_model("studies", "TaskType")
    for task_type in task_types:
        TaskType.objects.get_or_create(name=task_type)

    Paradigm = apps.get_model("studies", "Paradigm")
    for paradigm in paradigms["parent_paradigms"]:
        Paradigm.objects.get_or_create(name=paradigm)

    for paradigm in paradigms["Abnormal_Contents_of_Consciousness"]:
        abnormal_contents_of_consciousness = Paradigm.objects.get(name='Abnormal Contents of Consciousness')
        Paradigm.objects.get_or_create(name=paradigm, parent=abnormal_contents_of_consciousness)

    alcohol_consumption = Paradigm.objects.get(name='Alcohol Consumption')
    Paradigm.objects.get_or_create(name="Alcohol Consumption", parent=alcohol_consumption)

    for paradigm in paradigms["Anesthesia"]:
        anesthesia = Paradigm.objects.get(name='Anesthesia')
        Paradigm.objects.get_or_create(name=paradigm, parent=anesthesia)

    for paradigm in paradigms["Attentional_Manipulation"]:
        attentional_manipulation = Paradigm.objects.get(name='Attentional Manipulation')
        Paradigm.objects.get_or_create(name=paradigm, parent=attentional_manipulation)

    caffeine_consumption = Paradigm.objects.get(name='Caffeine Consumption')
    Paradigm.objects.get_or_create(name="Caffeine Consumption", parent=caffeine_consumption)

    for paradigm in paradigms["Case_Study"]:
        case_study = Paradigm.objects.get(name='Case Study')
        Paradigm.objects.get_or_create(name=paradigm, parent=case_study)

    change_blindness = Paradigm.objects.get(name='Change Blindness')
    Paradigm.objects.get_or_create(name="Change Blindness", parent=change_blindness)

    for paradigm in paradigms["Cognitive_Tasks"]:
        cognitive_tasks = Paradigm.objects.get(name='Cognitive Tasks')
        Paradigm.objects.get_or_create(name=paradigm, parent=cognitive_tasks)

    for paradigm in paradigms["Competition_Binocular"]:
        competition_binocular = Paradigm.objects.get(name='Competition (Binocular)')
        Paradigm.objects.get_or_create(name=paradigm, parent=competition_binocular)

    competition_monocular = Paradigm.objects.get(name='Competition (Monocular)')
    Paradigm.objects.get_or_create(name="Bistable percepts (Competition)", parent=competition_monocular)

    computational_modelling = Paradigm.objects.get(name='Computational Modelling')
    Paradigm.objects.get_or_create(name="Computational Modelling", parent=computational_modelling)

    contour_integration = Paradigm.objects.get(name='Contour Integration')
    Paradigm.objects.get_or_create(name="Contour Integration", parent=contour_integration)

    dichoptic_masking = Paradigm.objects.get(name='Dichoptic Masking')
    Paradigm.objects.get_or_create(name="Dichoptic Masking", parent=dichoptic_masking)

    for paradigm in paradigms["Direct_Stimulation"]:
        direct_stimulation = Paradigm.objects.get(name='Direct Stimulation')
        Paradigm.objects.get_or_create(name=paradigm, parent=direct_stimulation)

    for paradigm in paradigms["Disorders_of_Consciousness"]:
        disorders_of_consciousness = Paradigm.objects.get(name='Disorders of Consciousness')
        Paradigm.objects.get_or_create(name=paradigm, parent=disorders_of_consciousness)

    drowsiness = Paradigm.objects.get(name='Drowsiness')
    Paradigm.objects.get_or_create(name="Drowsiness", parent=drowsiness)

    emotion = Paradigm.objects.get(name='Emotion')
    Paradigm.objects.get_or_create(name="Emotion", parent=emotion)

    for paradigm in paradigms['Expectation']:
        expectation = Paradigm.objects.get(name='Expectation')
        Paradigm.objects.get_or_create(name=paradigm, parent=expectation)

    for paradigm in paradigms["Familiarity"]:
        familiarity = Paradigm.objects.get(name='Familiarity')
        Paradigm.objects.get_or_create(name=paradigm, parent=familiarity)

    family_nurture_intervention = Paradigm.objects.get(name='Family Nurture Intervention')
    Paradigm.objects.get_or_create(name="Family Nurture Intervention", parent=family_nurture_intervention)

    figure_ground = Paradigm.objects.get(name='Figure-Ground')
    Paradigm.objects.get_or_create(name="Figure-Ground", parent=figure_ground)

    filling_in = Paradigm.objects.get(name='Filling In')
    Paradigm.objects.get_or_create(name="Filling In", parent=filling_in)

    genetics = Paradigm.objects.get(name='Genetics')
    Paradigm.objects.get_or_create(name="Genetics", parent=genetics)

    fusion = Paradigm.objects.get(name='Fusion (Color)')
    Paradigm.objects.get_or_create(name="Fusion (Color)", parent=fusion)

    for paradigm in paradigms["Illusions"]:
        illusions = Paradigm.objects.get(name='Illusions')
        Paradigm.objects.get_or_create(name=paradigm, parent=illusions)

    imagination = Paradigm.objects.get(name='Imagination')
    Paradigm.objects.get_or_create(name="Motoric", parent=imagination)

    lifespan = Paradigm.objects.get(name='lifespan')
    Paradigm.objects.get_or_create(name="lifespan", parent=lifespan)

    locked_in_syndrome = Paradigm.objects.get(name='Locked In Syndrome')
    Paradigm.objects.get_or_create(name="Locked In Syndrome", parent=locked_in_syndrome)

    for paradigm in paradigms["Masking"]:
        masking = Paradigm.objects.get(name='Masking')
        Paradigm.objects.get_or_create(name=paradigm, parent=masking)

    mirror_masking = Paradigm.objects.get(name='Mirror Masking')
    Paradigm.objects.get_or_create(name="Mirror Masking", parent=mirror_masking)

    motion_detection = Paradigm.objects.get(name='Motion Detection')
    Paradigm.objects.get_or_create(name="Motion Detection", parent=motion_detection)

    motion_induced_blindness = Paradigm.objects.get(name='Motion induced Blindness')
    Paradigm.objects.get_or_create(name="Motion induced Blindness", parent=motion_induced_blindness)

    n_back = Paradigm.objects.get(name='N-Back')
    Paradigm.objects.get_or_create(name="N-Back", parent=n_back)

    pain = Paradigm.objects.get(name='Pain')
    Paradigm.objects.get_or_create(name="Pain", parent=pain)

    passive_exposure = Paradigm.objects.get(name='Passive Exposure')
    Paradigm.objects.get_or_create(name="Passive Exposure", parent=passive_exposure)

    pop_out = Paradigm.objects.get(name='Pop out')
    Paradigm.objects.get_or_create(name="Mooney Images", parent=pop_out)

    for paradigm in paradigms["Psychedelic Drugs"]:
        psychedelic_drugs = Paradigm.objects.get(name='Psychedelic Drugs')
        Paradigm.objects.get_or_create(name=paradigm, parent=psychedelic_drugs)

    repetition_suppression = Paradigm.objects.get(name='Repetition Suppression')
    Paradigm.objects.get_or_create(name="Repetition Suppression", parent=repetition_suppression)

    resting_state = Paradigm.objects.get(name='Resting State')
    Paradigm.objects.get_or_create(name="Resting State", parent=resting_state)

    reward = Paradigm.objects.get(name='Reward')
    Paradigm.objects.get_or_create(name="Reward", parent=reward)

    for paradigm in paradigms["Sedation"]:
        sedation = Paradigm.objects.get(name='Sedation')
        Paradigm.objects.get_or_create(name=paradigm, parent=sedation)

    size_constancy = Paradigm.objects.get(name='Size Constancy')
    Paradigm.objects.get_or_create(name="Size Constancy", parent=size_constancy)

    sleep = Paradigm.objects.get(name='Sleep')
    Paradigm.objects.get_or_create(name="Sleep", parent=sleep)

    sperling_like = Paradigm.objects.get(name='Sperling Like')
    Paradigm.objects.get_or_create(name="Sperling Like", parent=sperling_like)

    for paradigm in paradigms["Stimulus Degredation"]:
        stimulus_degradation = Paradigm.objects.get(name='Stimulus Degradation')
        Paradigm.objects.get_or_create(name=paradigm, parent=stimulus_degradation)

    swift = Paradigm.objects.get(name='SWIFT')
    Paradigm.objects.get_or_create(name="SWIFT", parent=swift)

    task_relevance = Paradigm.objects.get(name='Task Relevance')
    Paradigm.objects.get_or_create(name="Task Relevance", parent=task_relevance)

    visual_persistence = Paradigm.objects.get(name='Visual Persistence')
    Paradigm.objects.get_or_create(name="Visual Persistence", parent=visual_persistence)

    visual_search = Paradigm.objects.get(name='Visual Search')
    Paradigm.objects.get_or_create(name="Visual Search", parent=visual_search)


class Migration(migrations.Migration):
    dependencies = [
        ('studies', '0004_experiment_type'),
    ]

    operations = [
        migrations.RunPython(bootstrap_type_models, reverse_code=migrations.RunPython.noop)
    ]
