# Generated by Django 5.1.5 on 2025-02-22 18:46
from django.core.exceptions import FieldError, EmptyResultSet
from django.db import migrations
import logging
import pandas as pd

logger = logging.getLogger("Contrast2")


def add_technique_to_findings(apps, schema_editor):
    Technique = apps.get_model("studies", "Technique")
    FindingTag = apps.get_model("studies", "FindingTag")

    df = pd.read_excel("studies/data/Experiment-2025-02-18.xlsx", sheet_name="ids")
    experiments_ids = list(df["altered_technique"].unique())  # added unique() for safety

    try:
        intracranial_eeg_technique = Technique.objects.get(name="Intracranial EEG")
    except Technique.DoesNotExist:
        raise Exception("Required technique 'Intracranial EEG' not found")
    try:
        fmri_technique = Technique.objects.get(name="fMRI")
    except Technique.DoesNotExist:
        raise Exception("Required technique 'fMRI' not found")

    try:
        intracranial_eeg_findings_to_modify = FindingTag.objects.filter(experiment__in=experiments_ids).filter(
            experiment__techniques=intracranial_eeg_technique).filter(technique__isnull=False)
        fmri_findings_to_modify = FindingTag.objects.filter(experiment__in=experiments_ids).filter(
            experiment__techniques=fmri_technique).filter(technique__isnull=False)
    except EmptyResultSet:
        raise Exception("no findings to modify")

    for finding in intracranial_eeg_findings_to_modify:
        try:
            finding.technique = intracranial_eeg_technique
            finding.save()
            logger.info(f"Added Intracranial EEG technique to Finding {finding.id}")
        except FieldError:
            raise Exception("Field 'technique' does not exist")

    for finding in fmri_findings_to_modify:
        try:
            finding.technique = fmri_technique
            finding.save()
            logger.info(f"Added fMRI technique to Finding {finding.id}")
        except FieldError:
            raise Exception("Field 'technique' does not exist")


class Migration(migrations.Migration):
    dependencies = [
        ('studies', '0068_auto_remove_redundant_techniques'),
    ]

    operations = [
        migrations.RunPython(add_technique_to_findings),
    ]
