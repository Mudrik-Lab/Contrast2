# Generated by Django 5.1.5 on 2025-02-18 06:53

from django.db import migrations

import logging

from studies.services.get_queryset_to_modify import get_queryset_to_modify

logger = logging.getLogger("Contrast2")


def remove_redundant_techniques_from_experiments(apps, schema_editor):
    MAX_EXPERIMENT_ID = 988  # the highest id of pre-existing experiments
    true_mri_and_fmri_experiments_ids = [714]
    true_EEG_and_Intracranial_EEG_experiments_ids = [578, 727, 728, 883, 909, 962, 963]
    Experiment = apps.get_model("studies", "Experiment")
    Technique = apps.get_model("studies", "Technique")
    FindingTag = apps.get_model("studies", "FindingTag")

    try:
        fmri_technique = Technique.objects.get(name="fMRI")
    except Technique.DoesNotExist:
        raise Exception("Required technique 'fMRI' not found")
    try:
        mri_technique = Technique.objects.get(name="MRI")
    except Technique.DoesNotExist:
        raise Exception("Required technique 'fMRI' not found")
    try:
        intracranial_EEG_technique = Technique.objects.get(name="Intracranial EEG")
    except Technique.DoesNotExist:
        raise Exception("Required technique 'Intracranial EEG' not found")
    try:
        EEG_technique = Technique.objects.get(name="EEG")
    except Technique.DoesNotExist:
        raise Exception("Required technique 'EEG' not found")

    mri_experiments_to_modify = get_queryset_to_modify(
        experiment_model=Experiment,
        max_id=MAX_EXPERIMENT_ID,
        safe_list=true_mri_and_fmri_experiments_ids,
        first_technique=fmri_technique.id,
        second_technique=mri_technique.id,
    )

    for mri_experiment in mri_experiments_to_modify:
        mri_experiment.techniques.remove(mri_technique)
        logger.info(f"Removed MRI technique from Experiment {mri_experiment.id}")

    mri_experiment_count = mri_experiments_to_modify.count()
    logger.info(f"Migration completed. Modified {mri_experiment_count} experiments")

    mri_findings_to_modify = FindingTag.objects.filter(experiment__in=mri_experiments_to_modify).filter(
        technique__isnull=True
    )

    for finding in mri_findings_to_modify:
        finding.techniques.add(fmri_technique)
        finding.save()
        logger.info(f"Added fMRI technique to Finding {finding.id}")

    eeg_experiments_to_modify = get_queryset_to_modify(
        experiment_model=Experiment,
        max_id=MAX_EXPERIMENT_ID,
        safe_list=true_EEG_and_Intracranial_EEG_experiments_ids,
        first_technique=intracranial_EEG_technique.id,
        second_technique=EEG_technique.id,
    )
    for eeg_experiment in eeg_experiments_to_modify:
        eeg_experiment.techniques.remove(EEG_technique)
        logger.info(f"Removed EEG technique from Experiment {eeg_experiment.id}")

    eeg_experiment_count = eeg_experiments_to_modify.count()
    logger.info(f"Migration completed. Modified {eeg_experiment_count} experiments")

    eeg_findings_to_modify = FindingTag.objects.filter(experiment__in=eeg_experiments_to_modify).filter(
        technique__isnull=True
    )

    for finding in eeg_findings_to_modify:
        finding.techniques.add(intracranial_EEG_technique)
        finding.save()
        logger.info(f"Added Intracranial EEG technique to Finding {finding.id}")


class Migration(migrations.Migration):
    dependencies = [
        ("studies", "0066_auto_remove_EEG_technique"),
    ]

    operations = [
        migrations.RunPython(remove_redundant_techniques_from_experiments),
    ]
