# Generated by Django 4.1.4 on 2023-01-09 13:54

from django.db import migrations

from configuration.initial_setup import paradigms, task_types, techniques, modalities, consciousness_measure_types, \
    consciousness_measure_phases


def bootstrap_type_models(apps, schema_editor):
    ConsciousnessMeasureType = apps.get_model("studies", "ConsciousnessMeasureType")
    for measure_type in consciousness_measure_types:
        ConsciousnessMeasureType.objects.get_or_create(name=measure_type)

    ConsciousnessMeasurePhaseType = apps.get_model("studies", "ConsciousnessMeasurePhaseType")
    for measure_phase in consciousness_measure_phases:
        ConsciousnessMeasurePhaseType.objects.get_or_create(name=measure_phase)

    ModalityType = apps.get_model("studies", "ModalityType")
    for modality in modalities:
        ModalityType.objects.get_or_create(name=modality)

    Technique = apps.get_model("studies", "Technique")
    for technique in techniques:
        Technique.objects.get_or_create(name=technique)

    TaskType = apps.get_model("studies", "TaskType")
    for task_type in task_types:
        TaskType.objects.get_or_create(name=task_type)

    Theory = apps.get_model("studies", "Theory")
    for theory in ["Global Workspace",
                   "Integrated Information",
                   "Higher Order Thought",
                   "First Order & Predictive Processing",
                   "Other"]:
        Theory.objects.get_or_create(name=theory)

    global_workspace_theory = Theory.objects.get(name='Global Workspace')
    Theory.objects.get_or_create(name='GNW', parent=global_workspace_theory)

    integrated_information = Theory.objects.get(name='Integrated Information')
    Theory.objects.get_or_create(name='IIT', parent=integrated_information)

    higher_order_thought = Theory.objects.get(name='Higher Order Thought')
    Theory.objects.get_or_create(name='HOT', parent=higher_order_thought)

    first_order_and_predictive_processing = Theory.objects.get(name='First Order & Predictive Processing')
    Theory.objects.get_or_create(name='RPT', parent=first_order_and_predictive_processing)

    Paradigm = apps.get_model("studies", "Paradigm")
    for paradigm in paradigms["parent_paradigms"]:
        Paradigm.objects.get_or_create(name=paradigm, parent=None)

    for main_paradigm, group_of_specific_paradigms in paradigms.items():
        for specific_paradigm in group_of_specific_paradigms:
            parent = Paradigm.objects.get(name=main_paradigm, parent=None)
            Paradigm.objects.get_or_create(name=specific_paradigm, parent=parent)


class Migration(migrations.Migration):
    dependencies = [
        ('studies', '0004_experiment_type'),
    ]

    operations = [
        migrations.RunPython(bootstrap_type_models, reverse_code=migrations.RunPython.noop)
    ]
