"""
Django settings for contrast_api project.

Generated by 'django-admin startproject' using Django 4.1

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import datetime
from pathlib import Path
import os
from urllib.parse import urlparse

import sentry_sdk

# Build paths inside the project like this: BASE_DIR / 'subdir'.
from configurations import Configuration, values
from sentry_sdk.integrations.django import DjangoIntegration


def _sentry_event_filter(event, hint):
    raw_url = event["request"]["url"]
    parsed_url = urlparse(raw_url)
    filter_paths = ("/static", "/health_check", "/assets")
    if parsed_url.path.startswith(filter_paths):
        return None
    return event


class Base(Configuration):
    BASE_DIR = Path(__file__).resolve().parent.parent

    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = values.Value("YEtrZsZRynSAqRIJFHkVwtoAIaeQKrKInDZrxRDwHMUmeCJLqQ")

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True
    # WHITENOISE_INDEX_FILE = True

    ALLOWED_HOSTS = values.ListValue([])  # Would be passed from above in the deploy task
    CORS_ALLOWED_ORIGINS = values.ListValue([])
    CSRF_TRUSTED_ORIGINS = values.ListValue([])
    # Application definition
    THIRD_PARTY_APPS = [
        "whitenoise.runserver_nostatic",
        "corsheaders",
        "rest_framework_simplejwt",
        "rest_framework",
        "django_extensions",
        "import_export",
        "drf_spectacular",
        "nested_inline",
        "admin_reorder",
        "django_countries",
        "django_filters",
        "rangefilter",
        "anymail",
        "django_otp",
        "django_otp.plugins.otp_static",
        "django_otp.plugins.otp_totp",
        "two_factor",
        "simple_history",
    ]
    DJANGO_APPS = [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
    ]
    CONTRAST_API_APPS = ["approval_process", "configuration", "studies", "users", "uncontrast_studies"]
    INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + CONTRAST_API_APPS

    MIDDLEWARE = [
        "django.middleware.security.SecurityMiddleware",
        "whitenoise.middleware.WhiteNoiseMiddleware",
        "contrast_api.middleware.MultiSPAMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "corsheaders.middleware.CorsMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django_otp.middleware.OTPMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        "contrast_api.middleware.TimezoneMiddleware",
        "querycount.middleware.QueryCountMiddleware",
        "admin_reorder.middleware.ModelAdminReorder",
        "simple_history.middleware.HistoryRequestMiddleware",
    ]
    ANYMAIL_MAILGUN_SENDER_DOMAIN = values.Value(environ_prefix=None, environ_name="MAILGUN_SENDER_DOMAIN")
    ANYMAIL_MAILGUN_API_KEY = values.Value(environ_prefix=None, environ_name="MAILGUN_API_KEY")
    ANYMAIL_MAILGUN_API_URL = values.Value(
        environ_prefix=None, environ_name="MAILGUN_API_URL", default="https://api.eu.mailgun.net/v3"
    )

    EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"
    DEFAULT_FROM_EMAIL = values.EmailValue()
    SITE_MANAGER_ADDRESS = values.EmailValue(default=DEFAULT_FROM_EMAIL)

    QUERYCOUNT = {
        "THRESHOLDS": {"MEDIUM": 50, "HIGH": 200, "MIN_TIME_TO_LOG": 0, "MIN_QUERY_COUNT_TO_LOG": 5},
        "IGNORE_REQUEST_PATTERNS": [],
        "IGNORE_SQL_PATTERNS": [],
        "DISPLAY_DUPLICATES": None,
        "RESPONSE_HEADER": None,
    }
    ADMIN_REORDER = (
        {"app": "studies", "label": "studies", "models": ("studies.Study", "studies.Author")},
        {
            "app": "studies",
            "label": "contrast experiments data",
            "models": (
                "studies.Experiment",
                "studies.Stimulus",
                "studies.FindingTag",
                "studies.Interpretation",
                "studies.Task",
                "studies.Measure",
                "studies.ConsciousnessMeasure",
                "studies.Sample",
            ),
        },
        {
            "app": "studies",
            "label": "contrast parameters configuration",
            "models": (
                "studies.StimulusCategory",
                "studies.StimulusSubCategory",
                "studies.ModalityType",
                "studies.Technique",
                "studies.Paradigm",
                "studies.FindingTagFamily",
                "studies.FindingTagType",
                "studies.Theory",
                "studies.TaskType",
                "studies.MeasureType",
                "studies.ConsciousnessMeasureType",
                "studies.ConsciousnessMeasurePhaseType",
            ),
        },
        {
            "app": "uncontrast_studies",
            "label": "uncontrast parameters configuration",
            "models": (
                "uncontrast_studies.UnConsciousnessMeasureType",
                "uncontrast_studies.UnConsciousnessMeasureSubType",
                "uncontrast_studies.UnConsciousnessMeasurePhase",
                "uncontrast_studies.UnConStimulusCategory",
                "uncontrast_studies.UnConStimulusSubCategory",
                "uncontrast_studies.UnConModalityType",
                "uncontrast_studies.UnConMainParadigm",
                "uncontrast_studies.UnConSpecificParadigm",
                "uncontrast_studies.UnConProcessingMainDomain",
                "uncontrast_studies.UnConProcessingSubDomain",
                "uncontrast_studies.UnConSuppressionMethodType",
                "uncontrast_studies.UnConSuppressionMethodSubType",
            ),
        },
        {
            "app": "uncontrast_studies",
            "label": "uncontrast experiments data",
            "models": (
                "uncontrast_studies.UnConExperiment",
                "uncontrast_studies.UnConsciousnessMeasure",
                "uncontrast_studies.UnConSuppressedStimulus",
                "uncontrast_studies.UnConTargetStimulus",
                "uncontrast_studies.UnConProcessingDomain",
                "uncontrast_studies.UnConSuppressionMethod",
            ),
        },
        {"app": "configuration", "label": "general graphs and forms related configuration"},
        {
            "app": "auth",
            "label": "user management and authorization",
            "models": ("auth.Group", "auth.User", "users.Profile", ""),
        },
        {"app": "studies", "label": "aggregates", "models": ("studies.AggregatedInterpretation",)},
        {"app": "approval_process"},
        {"app": "otp_totp", "label": "two factor auth config"},
    )
    # Device

    ROOT_URLCONF = "contrast_api.urls"
    EMAIL_SERVICE = "contrast_api.technical_services.email.EmailService"
    TEMPLATES = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [
                os.path.join(BASE_DIR, "templates"),
            ],
            "APP_DIRS": True,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.debug",
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                ],
            },
        },
    ]

    WSGI_APPLICATION = "contrast_api.wsgi.application"

    # Database
    # https://docs.djangoproject.com/en/4.1/ref/settings/#databases

    DATABASES = values.DatabaseURLValue(
        "postgresql://contrast_api_user:contrast_api_pass@127.0.0.1:5432/contrast_api_db"
    )

    # Password validation
    # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
        },
    ]

    REST_FRAMEWORK = {
        "DEFAULT_PERMISSION_CLASSES": [
            "rest_framework.permissions.IsAuthenticated",
        ],
        "DEFAULT_AUTHENTICATION_CLASSES": ("rest_framework_simplejwt.authentication.JWTAuthentication",),
        "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
        "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
        "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
        "DEFAULT_RENDERER_CLASSES": (
            "rest_framework.renderers.JSONRenderer",
            "rest_framework.renderers.BrowsableAPIRenderer",
        ),
        "PAGE_SIZE": 30,
    }

    SIMPLE_JWT = {
        # Consider customizing other stuff here: https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
        "ACCESS_TOKEN_LIFETIME": datetime.timedelta(days=30)
    }

    # Internationalization
    # https://docs.djangoproject.com/en/4.1/topics/i18n/

    LANGUAGE_CODE = "en-us"

    TIME_ZONE = "UTC"

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True

    USER_TZ = values.Value()

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/4.1/howto/static-files/
    STATIC_ROOT = BASE_DIR / "static"
    STATIC_URL = "/static/"

    STORAGES = {
        "default": {"BACKEND": "storages.backends.s3boto3.S3Boto3Storage"},
        "staticfiles": {"BACKEND": "spa.storage.SPAStaticFilesStorage"},
    }

    MEDIA_ROOT = values.Value(BASE_DIR / "media")
    MEDIA_URL = "/media/"

    STATICFILES_DIRS = [os.path.join(BASE_DIR, "frontapp")]
    SWAGGER_ENABLED = values.BooleanValue(default=False)

    LOGIN_URL = "two_factor:login"
    TWO_FACTOR_REMEMBER_COOKIE_AGE = 600

    SPA_APPS_MAPPING = values.DictValue(
        {
            "contrastdb.tau.ac.il": "contrast",
            "localhost:8000": "uncontrast",  # change this for local development view
            "uncontrastdb.tau.ac.il": "uncontrast",
            # specific heroku dns names, hard coded here - for development access
            "uncontrast.drorsoft.com": "uncontrast",
        }
    )


class Development(Base):
    DEBUG = False
    SWAGGER_ENABLED = values.BooleanValue(default=True)
    CORS_ALLOW_ALL_ORIGINS = True
    ALLOWED_HOSTS = values.ListValue(
        ["web", "localhost", "127.0.0.1", "uncontrastdb.tau.ac.il", "contrastdb.tau.ac.il"]
    )

    STORAGES = {
        "default": {"BACKEND": "django.core.files.storage.FileSystemStorage"},
        "staticfiles": {"BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage"},
    }

    DEFAULT_FROM_EMAIL = values.EmailValue(default="localdev@test.com")
    EMAIL_BACKEND = "anymail.backends.console.EmailBackend"


class Testing(Development):
    PASSWORD_HASHERS = [
        "django.contrib.auth.hashers.MD5PasswordHasher",
    ]
    DATABASES = values.DatabaseURLValue(
        "postgresql://contrast_api_user:contrast_api_pass@127.0.0.1:5433/contrast_api_db"
    )

    STORAGES = {
        "default": {"BACKEND": "django.core.files.storage.InMemoryStorage"},
        "staticfiles": {"BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage"},
    }

    EMAIL_BACKEND = "anymail.backends.test.EmailBackend"
    DEFAULT_FROM_EMAIL = "from@test.com"
    SITE_MANAGER_ADDRESS = "to@test.com"


class Staging(Base):
    DEBUG = values.BooleanValue(default=False, environ_prefix="")
    CORS_ALLOW_ALL_ORIGINS = False
    AWS_STORAGE_BUCKET_NAME = values.Value(environ_name="S3_STORAGE")


class Production(Base):
    DEBUG = values.BooleanValue(default=False, environ_prefix="")
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOW_ALL_ORIGINS = False
    AWS_STORAGE_BUCKET_NAME = values.Value(environ_prefix="BUCKETEER", environ_name="BUCKET_NAME")
    AWS_ACCESS_KEY_ID = values.Value(environ_prefix="BUCKETEER")
    AWS_REGION = values.Value(environ_prefix="BUCKETEER")
    AWS_SECRET_ACCESS_KEY = values.Value(environ_prefix="BUCKETEER")
    SENTRY_DSN = values.Value(environ_prefix="")

    @classmethod
    def post_setup(cls):
        super().post_setup()
        sentry_sdk.init(
            dsn=cls.SENTRY_DSN,
            integrations=[
                DjangoIntegration(),
            ],
            environment=cls.__name__,
            # we are filtering out events to clean data for performance profiling
            before_send_transaction=_sentry_event_filter,
            # Set traces_sample_rate to 1.0 to capture 100%
            # of transactions for performance monitoring.
            # We recommend adjusting this value in production.
            traces_sample_rate=0.2,
            # If you wish to associate users to errors (assuming you are using
            # django.contrib.auth) you may enable sending PII data.
            send_default_pii=True,
        )
